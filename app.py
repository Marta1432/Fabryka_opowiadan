import os
import io
import re
import json
import requests
import streamlit as st
import openai
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.utils import ImageReader

# --- Rejestracja czcionek dla ReportLab (dla polskich znak√≥w w PDF) ---
try:
    # Wymaga plik√≥w LiberationSerif-Regular.ttf i LiberationSerif-Bold.ttf
    pdfmetrics.registerFont(TTFont('Serif', 'LiberationSerif-Regular.ttf'))
    pdfmetrics.registerFont(TTFont('Serif-Bold', 'LiberationSerif-Bold.ttf'))
except Exception:
    # Domy≈õlne czcionki na wypadek braku plik√≥w .ttf
    pdfmetrics.registerFont(TTFont('Serif', 'Helvetica'))
    pdfmetrics.registerFont(TTFont('Serif-Bold', 'Helvetica-Bold'))
    st.warning("‚ö†Ô∏è Nie uda≈Ço siƒô wczytaƒá czcionek LiberationSerif. U≈ºywam domy≈õlnych czcionek bez polskich znak√≥w w PDF.")

# --- Wczytanie preset√≥w styl√≥w ilustracji ---
try:
    with open("style_presets.json", "r", encoding="utf-8") as f:
        STYLE_PROMPTS = json.load(f)
except Exception:
    STYLE_PROMPTS = {}
    st.error("Brak pliku style_presets.json.")


# --- Konfiguracja strony ---
st.set_page_config(page_title="Fabryka Opowiada≈Ñ", page_icon="üìö", layout="wide")
st.title("‚ú® Fabryka Opowiada≈Ñ AI")
st.caption("Twoje miejsce do tworzenia niezapomnianych opowiada≈Ñ ‚ú®")


# --- Inicjalizacja stanu sesji ---
# Definiowanie krok√≥w aplikacji: "start", "plan", "writing", "final"
def init_session_state():
    """Inicjalizuje wszystkie niezbƒôdne zmienne stanu sesji."""
    defaults = {
        "step": "start",
        "api_key": "",
        "plan": None,
        "story": None,
        "scene_images": {},
        "generate_scene_idx": None,
        "regenerate_scene_idx": None,
        "num_images": 3, # Domy≈õlna warto≈õƒá
        "style": list(STYLE_PROMPTS.keys())[0] if STYLE_PROMPTS else "Bajkowy", # Domy≈õlny styl
        "want_images": "Tak",
        
        # Ustawienia domy≈õlne, kt√≥re sƒÖ kluczowe dla promptu
        "genre": "Komedia",
        "length": "2250 s≈Ç√≥w", # Klucz: s≈Çowa
        "audience": "Dzieciƒôcy (prosty jƒôzyk, bajkowy)", 
        "hero": "", 
        "side_characters_count": 1,
        "side_characters_desc": "", 
        "location": "Jedno miejsce (np. tajemniczy las)",
        "prompt": "" # G≈Ç√≥wny pomys≈Ç
    }
    for key, value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = value

init_session_state()


# --- Funkcje pomocnicze ---

def get_preferences_prompt():
    """Zbiera wszystkie ustawienia u≈ºytkownika w jeden, priorytetowy kontekst dla AI."""
    
    # Okre≈õlanie liczby scen na podstawie wybranej d≈Çugo≈õci
    length_map = {
        "1500 s≈Ç√≥w": "3 kr√≥tkich rozdzia≈Ç√≥w (SCENA 1-3)",
        "2250 s≈Ç√≥w": "5 ≈õrednich rozdzia≈Ç√≥w (SCENA 1-5)",
        "3000 s≈Ç√≥w": "7 d≈Çugich rozdzia≈Ç√≥w (SCENA 1-7)"
    }
    num_chapters_str = length_map.get(st.session_state.length, "standardowƒÖ liczbƒô 5 rozdzia≈Ç√≥w (SCENA 1-5)")
    
    preferences = f"""
    PRIORYTETOWE WYMAGANIA:
    1. D≈Çugo≈õƒá: Opowiadanie powinno mieƒá d≈Çugo≈õƒá oko≈Ço **{st.session_state.length}** i sk≈Çadaƒá siƒô z **{num_chapters_str}**. 
    2. Styl: Utrzymane w stylu narracji **{st.session_state.audience}** oraz gatunku **{st.session_state.genre}**.
    3. G≈Ç√≥wny bohater: **{st.session_state.hero if st.session_state.hero else 'Nieokre≈õlony, wymy≈õl w≈Çasnego'}**.
    4. Postacie poboczne: **{st.session_state.side_characters_count}** postacie poboczne. Opis r√≥l: **{st.session_state.side_characters_desc if st.session_state.side_characters_desc else 'Nieokre≈õlone, wymy≈õl w≈Çasne'}**.
    5. Miejsce akcji: **{st.session_state.location}**.
    
    Pamiƒôtaj, aby ≈õci≈õle przestrzegaƒá ustalonej liczby rozdzia≈Ç√≥w i ich numeracji.
    """
    return preferences.strip()


def clean_title_and_extract_number(text):
    """Czy≈õci tekst z dodatkowych symboli Markdown (jak ##) i pr√≥buje wyciƒÖgnƒÖƒá numer sceny."""
    cleaned_text = text.replace('#', '').replace('*', '').strip()
    match = re.search(r"(\d+)", cleaned_text)
    scene_num = int(match.group(0)) if match else None
    return cleaned_text, scene_num


def create_pdf(story_text, images_data=None):
    # Je≈õli nie przekazano ilustracji, pobierz je z session_state
    if not images_data and "scene_images" in st.session_state:
            images_data = st.session_state.scene_images



    buffer = io.BytesIO()
    pdf = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter

    # --- Czcionki z polskimi znakami (Liberation Serif) ---
    pdfmetrics.registerFont(TTFont("LiberationSerif", "LiberationSerif-Regular.ttf"))
    pdfmetrics.registerFont(TTFont("LiberationSerif-Bold", "LiberationSerif-Bold.ttf"))

    margin = 50
    text_width = width - 2 * margin
    y = height - margin

    # --- Nag≈Ç√≥wek PDF ---
    pdf.setFont("LiberationSerif-Bold", 18)
    pdf.drawCentredString(width / 2, y, "Opowiadanie AI")
    y -= 40

    pdf.setFont("LiberationSerif", 12)

    # --- Przetwarzanie opowiadania ---
    lines = story_text.split("\n")
    scene_num = 0

    for line in lines:
        # Rozpoznaj sceny / rozdzia≈Çy
        if line.strip().lower().startswith("rozdzia≈Ç"):
            scene_num += 1
            pdf.setFont("LiberationSerif-Bold", 14)
            pdf.drawString(margin, y, line.strip())
            y -= 25
            pdf.setFont("LiberationSerif", 12)
        else:
            # Zwyk≈Çy tekst
            if not line.strip():
                y -= 10
                continue

            # Dziel linie d≈Çu≈ºsze ni≈º szeroko≈õƒá strony
            while line:
                text_line = line[:90]
                line = line[90:]
                pdf.drawString(margin, y, text_line)
                y -= 15

                # Nowa strona je≈õli brak miejsca
                if y < margin:
                    pdf.showPage()
                    pdf.setFont("LiberationSerif", 12)
                    y = height - margin


                # --- Ilustracja po scenie (poprawione wstawianie obrazk√≥w) ---
        if scene_num > 0 and scene_num in images_data:
            try:
                img_bytes = io.BytesIO(images_data[scene_num])  # bajty z pamiƒôci

                # Reset kursora przed i po utworzeniu ImageReadera
                img_bytes.seek(0)
                img_reader = ImageReader(img_bytes)
                img_bytes.seek(0)



                # dopasowanie rozmiaru obrazka do szeroko≈õci PDF
                iw, ih = img_reader.getSize()
                max_w = text_width * 0.75
                scale = min(1.0, max_w / float(iw))
                img_w = iw * scale
                img_h = ih * scale

                # je≈õli brak miejsca na stronie, utw√≥rz nowƒÖ
                if y - img_h < margin:
                    pdf.showPage()
                    pdf.setFont("LiberationSerif", 12)
                    y = height - margin

                # wy≈õrodkowanie ilustracji
                x_center = (width - img_w) / 2
                pdf.drawImage(img_reader, x_center, y - img_h - 10, width=img_w, height=img_h)
                y -= img_h + 30

            except Exception as e:
                st.warning(f"‚ö†Ô∏è Nie uda≈Ço siƒô dodaƒá ilustracji dla sceny {scene_num}: {e}")







    pdf.save()
    buffer.seek(0)
    return buffer







def handle_image_generation(scenes):
    """
    Logika wywo≈ÇujƒÖca OpenAI Image API (DALL-E) na podstawie wska≈∫nik√≥w z session_state.
    Wykonywana PO pƒôtli wy≈õwietlajƒÖcej przyciski.
    """
    
    action_idx = st.session_state.get('generate_scene_idx')
    action_is_regenerate = False

    if action_idx is None:
        action_idx = st.session_state.get('regenerate_scene_idx')
        action_is_regenerate = True
    
    if action_idx is not None:
        
        # Ustalenie, kt√≥ra scena ma byƒá ilustrowana (idx - 1)
        if 0 <= action_idx - 1 < len(scenes):
            scene_to_illustrate = scenes[action_idx - 1] 
        else:
            st.error(f"‚ùå B≈ÇƒÖd: Numer sceny {action_idx} poza zakresem planu.")
            st.session_state['generate_scene_idx'] = None
            st.session_state['regenerate_scene_idx'] = None
            return

        with st.spinner(f"‚è≥ {'Generujƒô ponownie' if action_is_regenerate else 'Tworzƒô'} ilustracjƒô dla Sceny {action_idx}..."):
            
            # Przygotowanie prompta DALL-E
            style_key = st.session_state.style
            base_prompt = STYLE_PROMPTS.get(style_key, "")
            
            # U≈ºycie wyra≈ºenia regularnego do usuniƒôcia nag≈Ç√≥wka "SCENA X:"
            clean_description = re.sub(r"(SCENA|ROZDZIA≈Å)\s+\d+[:.]?\s*", "", scene_to_illustrate, flags=re.IGNORECASE).strip()
            
            # ZMODYFIKOWANY PROMPT: Zdecydowane ≈ºƒÖdanie braku tekstu i ramek
            prompt = f"""
            ABSOLUTNIE ≈ªADNYCH LITER, ≈ªADNEGO TEKSTU, ≈ªADNYCH NAPIS√ìW, ≈ªADNYCH RAMEK I OBRAMOWA≈É. TO JEST ILUSTRACJA DO EBOOKA.
            
            Ilustracja do ebooka, sceny opowiadania. 
            Opis sceny: {clean_description}.
            Styl graficzny: {style_key.lower()} ‚Äì {base_prompt}.
            Wysoka jako≈õƒá, sp√≥jny styl.
            """
            
            try:
                # U≈ºywamy DALL-E 3 (najnowszy model, generuje lepsze obrazy)
                response = openai.Image.create(
                    model="dall-e-3",
                    prompt=prompt,
                    n=1,
                    size="1024x1024"
                )

                image_url = response["data"][0]["url"]
                try:
                    img_data = requests.get(image_url, timeout=20).content
                    st.session_state.scene_images[action_idx] = img_data  # zapisujemy bajty, nie URL
                    st.success(f"‚úÖ Ilustracja dla Sceny {action_idx} gotowa!")

                except Exception as e:
                    st.error(f"‚ùå Nie uda≈Ço siƒô pobraƒá obrazu: {e}")

            except Exception as e:
                st.error(f"‚ùå B≈ÇƒÖd generowania ilustracji dla Sceny {action_idx}: {e}")

                
        st.session_state['generate_scene_idx'] = None
        st.session_state['regenerate_scene_idx'] = None
        st.rerun()


# --- Sekcja logowania API (Sta≈Çy element Sidebar) ---
st.sidebar.header("üîê Klucz API OpenAI")

if not st.session_state.api_key:
    key_input = st.sidebar.text_input("Wklej sw√≥j klucz API:", type="password", key="api_key_input")
    if key_input:
        st.session_state.api_key = key_input
        st.rerun()
    openai.api_key = None
    st.sidebar.warning("‚ö†Ô∏è Klucz API jest wymagany.")
else:
    openai.api_key = st.session_state.api_key
    st.sidebar.success("‚úÖ Klucz API jest ustawiony.")
    if st.sidebar.button("üö™ Wyloguj", key="logout_btn"):
        st.session_state.api_key = ""
        # Ca≈Çkowity reset, aby powr√≥ciƒá do kroku startowego
        keep_keys = ["api_key", "STYLE_PROMPTS"] 
        keys_to_delete = [key for key in st.session_state.keys() if key not in keep_keys]
        for key in keys_to_delete:
            del st.session_state[key]
        init_session_state() 
        st.rerun()

# -----------------------------------------------------------
# KOREKTA B≈ÅƒòDU INDEXOWANIA GATUNKU
if 'genre' in st.session_state and st.session_state.genre == 'Ba≈õ≈Ñ/Fantasy':
    st.session_state.genre = 'Bajka/Ba≈õ≈Ñ'
# -----------------------------------------------------------


# Blokuj dzia≈Çanie aplikacji bez klucza
if not st.session_state.api_key:
    st.info("Aby rozpoczƒÖƒá, wprowad≈∫ sw√≥j klucz API OpenAI w panelu bocznym.")
    st.stop()


# --- PANEL BOCZNY (Ustawienia Opowiadania) ---

st.sidebar.markdown("---")
st.sidebar.header("üìù Ustawienia Opowiadania")

# --- KRYTYCZNE POLE: Pomys≈Ç na Opowiadanie (TextArea) ---
st.session_state.prompt = st.sidebar.text_area(
    "G≈Å√ìWNY POMYS≈Å (np. ZajƒÖczek, kt√≥ry szuka≈Ç zaginionej marchewki. Tytu≈Ç: Przygody zajƒÖca Fistaszka) Wype≈Çnij bƒÖd≈∫ zostaw puste AI samo co≈õ wybierze i wygeneruje",
    value=st.session_state.get('prompt', ''),
    height=150,
    key="sb_prompt_main"
)
st.sidebar.markdown("---")


# U≈ºywamy formularza w sidebarze, aby zachowaƒá sp√≥jno≈õƒá i kontrolowaƒá reruny po klikniƒôciu 'submit'
with st.sidebar.form("story_settings_sidebar"):
    st.markdown("Poni≈ºsze opcje pozwalajƒÖ na precyzyjne ustawienie historii. **Te ustawienia sƒÖ priorytetowe**.")

    st.subheader("‚öôÔ∏è Opcje techniczne")
    
    # 1. Wyb√≥r Modelu GPT
    st.session_state.model = st.selectbox(
        "Model GPT do generowania:",
        ["gpt-4o-mini", "gpt-4o"],
        index=["gpt-4o-mini", "gpt-4o"].index(st.session_state.get('model', 'gpt-4o-mini')),
        key="sb_model"
    )
    
    # 2. D≈Çugo≈õƒá opowiadania (w s≈Çowach)
    st.session_state.length = st.selectbox(
        "≈ªƒÖdana d≈Çugo≈õƒá opowiadania (wp≈Çywa na szczeg√≥≈Çowo≈õƒá i liczbƒô scen):", 
        ["1500 s≈Ç√≥w", "2250 s≈Ç√≥w", "3000 s≈Ç√≥w"],
        index=["1500 s≈Ç√≥w", "2250 s≈Ç√≥w", "3000 s≈Ç√≥w"].index(st.session_state.get('length', '2250 s≈Ç√≥w')),
        key="sb_length"
    )

    st.markdown("---")
    st.subheader("üé≠ Fabu≈Ça i Styl")
    
    # 3. Styl narracji / Grupa wiekowa
    st.session_state.audience = st.selectbox(
        "Docelowy styl narracji / Grupa wiekowa:", 
        ["Dzieciƒôcy (prosty jƒôzyk, bajkowy)", "M≈Çodzie≈ºowy (dynamika, jƒôzyk potoczny)", "Doros≈Çy (refleksyjny, g≈Çƒôbokie tematy)"],
        index=["Dzieciƒôcy (prosty jƒôzyk, bajkowy)", "M≈Çodzie≈ºowy (dynamika, jƒôzyk potoczny)", "Doros≈Çy (refleksyjny, g≈Çƒôbokie tematy)"].index(st.session_state.get('audience', 'Dzieciƒôcy (prosty jƒôzyk, bajkowy)')),
        key="sb_audience"
    )

    # 4. Gatunek Opowiadania (Rozszerzona lista)
    st.session_state.genre = st.selectbox(
        "Gatunek opowiadania:", 
        ["Bajka/Ba≈õ≈Ñ", "Fantasy", "Przygoda", "Komedia", "Horror", "Romans", "Sci-Fi", "Dramat"],
        index=["Bajka/Ba≈õ≈Ñ", "Fantasy", "Przygoda", "Komedia", "Horror", "Romans", "Sci-Fi", "Dramat"].index(st.session_state.get('genre', 'Bajka/Ba≈õ≈Ñ')),
        key="sb_genre_select"
    )
    
    # 5. G≈Ç√≥wny Bohater
    st.session_state.hero = st.text_input(
        "Kim jest g≈Ç√≥wny bohater? (np. Odwa≈ºny rycerz imieniem Jan lub Pies Pucek)",
        value=st.session_state.get('hero', ''),
        key="sb_hero"
    )

    # 6. Postacie Poboczne (Licznik i Opis)
    st.session_state.side_characters_count = st.slider(
        "Liczba postaci pobocznych:",
        min_value=0,
        max_value=5,
        value=st.session_state.get('side_characters_count', 1),
        key="sb_side_count"
    )

    st.session_state.side_characters_desc = st.text_area(
        "Opis r√≥l postaci pobocznych (np. Wredny kot, kt√≥ry chce ukra≈õƒá marchewkƒô):",
        value=st.session_state.get('side_characters_desc', ''),
        height=80,
        key="sb_side_desc"
    )

    # 7. Miejsce Akcji
    st.session_state.location = st.selectbox(
        "Ograniczenie miejsca akcji:", 
        ["Jedno miejsce (np. tajemniczy las)", "Dwa miejsca (np. miasto i g√≥ry)", "Losowo (zostaw AI)"],
        index=["Jedno miejsce (np. tajemniczy las)", "Dwa miejsca (np. miasto i g√≥ry)", "Losowo (zostaw AI)"].index(st.session_state.get('location', 'Jedno miejsce (np. tajemniczy las)')),
        key="sb_location"
    )


    st.markdown("---")
    st.subheader("üé® Ilustracje (DALL-E)")

    # 8. Czy chcesz ilustracje?
    st.session_state.want_images = st.radio(
        "Czy chcesz ilustracje do opowiadania?",
        ["Tak", "Nie"],
        index=["Tak", "Nie"].index(st.session_state.get('want_images', 'Tak')),
        key="sb_want_images"
    )
    
    # 9. Ustawienia ilustracji (pokazujemy tylko, je≈õli wybrano 'Tak')
    if st.session_state.want_images == "Tak":
        image_options = list(STYLE_PROMPTS.keys())
        st.session_state.style = st.selectbox(
            "Styl ilustracji:",
            image_options,
            index=image_options.index(st.session_state.get('style', 'Bajkowy')),
            key="sb_style"
        )
        
        # U≈ºywamy suwaka do liczby, ale AI bƒôdzie ograniczaƒá to do liczby rozdzia≈Ç√≥w
        st.session_state.num_images = st.slider(
            "Maksymalna liczba ilustracji (na tyle rozdzia≈Ç√≥w, ile bƒôdzie w planie):",
            min_value=1,
            max_value=9,
            value=st.session_state.get('num_images', 5),
            key="sb_num_images"
        )
    else:
        st.session_state.num_images = 0
        st.session_state.style = None


    # Przycisk zatwierdzajƒÖcy formularz
    submitted_settings = st.form_submit_button("Start! Generuj Plan Opowiadania üöÄ", type="primary")


# Logika generowania planu (dzia≈Ça niezale≈ºnie od kroku, ale resetuje historiƒô)
if submitted_settings:
    # Reset historii po zmianie parametr√≥w
    st.session_state.plan = None
    st.session_state.story = None
    st.session_state.scene_images = {}
    st.session_state.step = "start" # Zawsze wracamy na start po zmianie ustawie≈Ñ

    with st.spinner("‚úçÔ∏è Tworzƒô plan wydarze≈Ñ..."):
        
        # Obliczanie oczekiwanej liczby scen na podstawie d≈Çugo≈õci
        scene_count = 3 if "1500" in st.session_state.length else 5 if "2250" in st.session_state.length else 7
        
        # --- U≈ºycie Priorytetowych Preferencji ---
        preferences = get_preferences_prompt()
        
        # --- INSTRUKCJA DOT. STRUKTURY TR√ìJDZIELNEJ ---
        structure_prompt = f"""
        Podziel plan na klasycznƒÖ strukturƒô tr√≥jdzielnƒÖ (Akt I - Rozpoczƒôcie, Akt II - Rozwiniƒôcie, Akt III - Zako≈Ñczenie). 
        Zachowaj proporcje: Akt I (ok. 25% scen), Akt II (ok. 50% scen), Akt III (ok. 25% scen). 
        W planie NIE u≈ºywaj nag≈Ç√≥wk√≥w Akt I, Akt II, Akt III. Po prostu u≈Ç√≥≈º sceny w tej logicznej kolejno≈õci.
        """
        
        prompt = f"""
        {preferences}
        
        G≈Å√ìWNY POMYS≈Å: **{st.session_state.prompt}**
        
        Na podstawie powy≈ºszych PRIORYTETOWYCH WYMAGA≈É i g≈Ç√≥wnego pomys≈Çu:
        
        1. Stw√≥rz plan opowiadania, kt√≥ry bƒôdzie mia≈Ç **dok≈Çadnie {scene_count} punkt√≥w** (SCENA 1‚Äì{scene_count}).
        2. {structure_prompt}
        3. Ka≈ºdy punkt ma zawieraƒá maksymalnie 3 zdania opisujƒÖce kluczowe wydarzenia.
        4. Opisz scenƒô tak, aby by≈Ça ≈Çatwa do zilustrowania.

        Format odpowiedzi (ZACZNIJ OD PIERWSZEJ SCENY, BEZ DODATKOWEGO TEKSTU WSTƒòPNEGO):
        SCENA 1: ...
        SCENA 2: ...
        ...
        SCENA {scene_count}: ...
        """
        
        try:
            response = openai.ChatCompletion.create(
                model=st.session_state.model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=1500,
                temperature=0.8
            )
            
            st.session_state.plan = response.choices[0].message["content"]
            st.session_state.step = "plan"
            st.success("Plan opowiadania gotowy!")
        
        except Exception as e:
            st.error(f"‚ùå WystƒÖpi≈Ç b≈ÇƒÖd podczas generowania planu: {e}")
            st.session_state.step = "start"

        st.rerun()

# --- WIDOK G≈Å√ìWNY W ZALE≈ªNO≈öCI OD KROKU ---

# KROK 1: START (Wy≈õwietlanie tylko komunikatu oczekiwania na plan)
if st.session_state.step == "start":
    st.header("1. Czekam na plan opowiadania")
    st.info("Wprowad≈∫ wszystkie szczeg√≥≈Çy w panelu bocznym i naci≈õnij 'Generuj Plan Opowiadania üöÄ', aby kontynuowaƒá.")


# --- KROK 2: PLAN (Wy≈õwietlanie i generowanie ilustracji) ---
if st.session_state.step == "plan" and st.session_state.plan:
    st.header("2. Akceptacja planu i ilustracje")
    st.caption("Przejrzyj plan, wygeneruj ilustracje (je≈õli wybrano) i przejd≈∫ do pisania historii.")
    st.divider()

    # --- Ekstrakcja scen ---
    scenes_raw = [line.strip() for line in st.session_state.plan.split("\n") if line.strip()]
    # U≈ºywamy re.match, aby byƒá odpornym na SCENA lub ROZDZIA≈Å
    scenes = [s for s in scenes_raw if re.match(r"(SCENA|ROZDZIA≈Å)\s+\d+", s.upper())]
    
    total_images = st.session_state.num_images
    current_images = len(st.session_state.scene_images)
    
    if st.session_state.want_images == "Tak":
        st.progress(current_images / total_images)
        st.caption(f"Ilustracje: **{current_images}/{total_images}** (Styl: {st.session_state.style})")
        st.markdown("---")
    
    # --- Pƒôtla wy≈õwietlajƒÖca sceny i przyciski ---
    for idx, scene in enumerate(scenes, start=1):
        clean_scene_display = scene.replace('###', '').replace('"', '').strip()
        st.markdown(f"**{clean_scene_display}**") # Usuwamy prefix idx., bo jest w tek≈õcie Scena X:
        
        col1, col2 = st.columns([0.3, 0.7])
        
        # LOGIKA PRZYCISK√ìW (ustawia stan sesji poprzez callback)
        if st.session_state.want_images == "Tak":
            with col1:
                if idx in st.session_state.scene_images:
                    # Przycisk regeneracji
                    st.button(
                        f"üîÅ Wygeneruj ponownie ({idx})", 
                        key=f"regen_{idx}",
                        on_click=lambda i=idx: st.session_state.__setitem__('regenerate_scene_idx', i),
                        help="Wygeneruj nowƒÖ ilustracjƒô."
                    )
                elif current_images < total_images:
                    # Przycisk generowania
                    st.button(
                        f"üé® Generuj ilustracjƒô ({idx})", 
                        key=f"gen_{idx}",
                        on_click=lambda i=idx: st.session_state.__setitem__('generate_scene_idx', i),
                        help="Generuje nowƒÖ ilustracjƒô."
                    )
                else:
                    st.info("Limit ilustracji osiƒÖgniƒôty.")
                        
            # Wy≈õwietlenie obrazka
            with col2:
                if idx in st.session_state.scene_images:
                    st.image(
                        st.session_state.scene_images[idx],
                        caption=f"Ilustracja {idx} ‚Äì {st.session_state.style}",
                        use_column_width="auto"
                    )
        
        st.markdown("---")

    # FAKTYCZNE WYWO≈ÅANIE API (poza pƒôtlƒÖ, na ko≈Ñcu kroku)
    if st.session_state.want_images == "Tak":
        handle_image_generation(scenes)


    # PRZYCISK PRZEJ≈öCIA DALEJ
    st.markdown("---")
    if st.button("‚úçÔ∏è Akceptujƒô plan i przejd≈∫ do pisania", key="go_to_writing_clean"):
        st.session_state.step = "writing"
        st.session_state['generate_scene_idx'] = None
        st.session_state['regenerate_scene_idx'] = None
        st.rerun()


# --- KROK 3: WRITING (Generowanie pe≈Çnej historii) ---
if st.session_state.step == "writing":
    st.header("3. Generowanie i edycja historii")
    
    if st.session_state.story is None:
        
        with st.spinner("‚è≥ Piszƒô pe≈Çne opowiadanie na podstawie zaakceptowanego planu... To mo≈ºe potrwaƒá do minuty. Proszƒô nie od≈õwie≈ºaƒá strony."):
            
            # --- U≈ºycie Priorytetowych Preferencji ---
            preferences = get_preferences_prompt()
            
            prompt = f"""
            {preferences}
            
            G≈Å√ìWNY POMYS≈Å: **{st.session_state.prompt}**
            
            Na podstawie powy≈ºszych PRIORYTETOWYCH WYMAGA≈É i g≈Ç√≥wnego pomys≈Çu, oraz poni≈ºszego planu, napisz pe≈Çne, sp√≥jne opowiadanie.
            
            Pamiƒôtaj:
            - **Zachowaj klasycznƒÖ strukturƒô tr√≥jdzielnƒÖ (rozpoczƒôcie, rozwiniƒôcie, zako≈Ñczenie) zgodnie z planem poni≈ºej.**
            - **≈öci≈õle przestrzegaj d≈Çugo≈õci i liczby rozdzia≈Ç√≥w.**
            - **ROZWINIƒòCIE KA≈ªDEJ SCENY: Pamiƒôtaj, ≈ºe opowiadanie ma byƒá d≈Çugie (1500-3000 s≈Ç√≥w). KA≈ªDA SCENA musi byƒá rozbudowana, szczeg√≥≈Çowa i zawieraƒá dialogi. Nie poprzestawaj na 2-3 akapitach na scenƒô.**
            - **U≈ºyj bohatera i stylu zdefiniowanego w PRIORYTETOWYCH WYMAGANIACH.**
            - Ka≈ºdƒÖ nowƒÖ scenƒô zacznij dok≈Çadnie od nag≈Ç√≥wka ROZDZIA≈Å X: (gdzie X to numer sceny) w oddzielnej linii. Oddzielaj akapity pustƒÖ liniƒÖ.
            
            Plan do wykorzystania (ju≈º u≈Ço≈ºony w kolejno≈õci Akt I, II, III):
            ---
            {st.session_state.plan}
            ---
            """
            
            try:
                response = openai.ChatCompletion.create(
                    model=st.session_state.model, 
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=3500, # Max token√≥w dla GPT-4o, aby pozwoliƒá na d≈Çugie opowie≈õci
                    temperature=0.7
                )
                st.session_state.story = response.choices[0].message["content"]
                st.success("Opowiadanie gotowe!")
                st.rerun()
            except Exception as e:
                st.error(f"‚ùå B≈ÇƒÖd podczas pisania historii. Spr√≥buj ponownie. B≈ÇƒÖd: {e}")
                st.session_state.step = "plan"
                st.rerun()

    # Wy≈õwietlenie i edycja opowiadania
    if st.session_state.story:
        st.markdown("---")
        st.subheader("Ostatnie poprawki")
        
        st.session_state.story = st.text_area(
            "Edytuj opowiadanie, aby dopracowaƒá szczeg√≥≈Çy. Nie usuwaj nag≈Ç√≥wk√≥w ROZDZIA≈Å X:",
            st.session_state.story,
            height=600,
            key="final_story_editor"
        )
        
        st.markdown("---")
        colC, colD = st.columns(2)
        with colC:
            if st.button("‚¨ÖÔ∏è Wr√≥ƒá do planu i ilustracji", key="back_to_plan"):
                st.session_state.step = "plan"
                st.rerun()

        with colD:
            if st.button("üíæ Zako≈Ñcz i generuj PDF", key="go_to_final"):
                st.session_state.step = "final"
                st.rerun()


# --- KROK 4: FINAL (Pobieranie i podsumowanie) ---
if st.session_state.step == "final":
    st.header("4. Opowiadanie gotowe!")
    st.success("Twoja historia zosta≈Ça pomy≈õlnie stworzona i jest gotowa do pobrania jako PDF.")
    st.markdown("---")
    
    st.subheader("Pobieranie pliku PDF")
    
    if st.session_state.story:

        st.write("üß© Debug: zawarto≈õƒá scene_images", st.session_state.scene_images)


        with st.spinner("Przygotowujƒô PDF (tekst + ilustracje)..."):
            pdf_buffer = create_pdf(
                st.session_state.story, 
                st.session_state.scene_images
            )

        st.download_button(
            label="üì• Kliknij tutaj, aby pobraƒá opowiadanie jako PDF (tekst + obrazy)",
            data=pdf_buffer,
            file_name="fabryka_opowiadan.pdf",
            mime="application/pdf"
        )

    st.markdown("---")
    
    col_final_1, col_final_2 = st.columns(2)
    with col_final_1:
        if st.button("‚úèÔ∏è Wr√≥ƒá do edycji tekstu", key="edit_story_final"):
            st.session_state.step = "writing"
            st.rerun()

    with col_final_2:
        if st.button("üîÑ Stw√≥rz nowe opowiadanie", key="new_story_final"):
            # Zachowaj tylko klucz API i presety styl√≥w, resztƒô usu≈Ñ
            keep_keys = ["api_key", "STYLE_PROMPTS"] 
            keys_to_delete = [key for key in st.session_state.keys() if key not in keep_keys]
            for key in keys_to_delete:
                del st.session_state[key]
            init_session_state() 
            st.rerun()